task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

buildscript {
    ext {
        kotlin_version = '1.2.70'
        spring_boot_version = '2.0.5.RELEASE'
        hibernate_version = '4.3.11.Final'
        druid_version = '1.0.9'
        mysql_connector_version = '5.1.29'
        jackson_version = '2.9.2'
    }

    repositories {
        maven {
            url "http://192.168.11.160:16000/repository/maven-public/"
        }
//        mavenCentral()
    }

//	plugins {
//		id "org.jetbrains.kotlin.plugin.spring" version $kotlin_version
//	}

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

group 'com.ariane'
version '0.3.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[
        compileJava,
        compileTestJava,
        javadoc,
]*.options*.encoding = 'UTF-8'

println project.name
println project.version

compileJava {
    // 启用在单独的daemon进程中编译
    options.fork = true
}

kotlin {
    experimental {
        // 不允许使用kotlin的协程
        coroutines = 'error'
    }
}

configure([compileKotlin, compileTestKotlin]) {
    kotlinOptions {
        // Generate metadata for Java 1.8 reflection on method parameters
        javaParameters = true

        // Target version of the generated JVM bytecode (1.6 or 1.8), default is 1.6
        jvmTarget = '1.8'
    }
}

def resExcludes = ['/react/.idea',
                   '/react/node_modules',
                   '/react/src',
                   '/react/webpack',
                   '/react/.babelrc',
                   '/react/.eslintrc',
                   '/react/package.json',
                   '/react/tsconfig.json',
                   '/react/typings.json',
                   '/react/tslint.json',
                   '/react/yarn.lock',
                   '/react/yarn-error.log',
]

processResources {
    excludes = resExcludes
}

repositories {
    maven {
        url "http://192.168.11.160:16000/repository/maven-public/"
    }
//    mavenCentral()
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

    compile("org.springframework.boot:spring-boot-starter-web:$spring_boot_version")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version")

    compile("org.hibernate:hibernate-core:$hibernate_version")
    compile("com.alibaba:druid:$druid_version")
    compile("mysql:mysql-connector-java:$mysql_connector_version")

    compile("com.fasterxml.jackson.core:jackson-core:$jackson_version")
    compile("com.fasterxml.jackson.core:jackson-databind:$jackson_version")
    compile("com.fasterxml.jackson.core:jackson-annotations:$jackson_version")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.2")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version")

    testCompile("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
}

mainClassName = "com.ariane.thirdlab.AppKt"

// 增加配置文件
distributions {
    boot {
        baseName = "${project.name}"
        contents {
            from("application.properties.tpl") {
                into("bin")
            }.rename("application.properties.tpl", "application.properties")
        }
    }
}

// 重命名压缩格式和文件名
bootDistTar.extension = 'tar.gz'
bootDistTar.archiveName = "${project.name}.${bootDistTar.extension}"
bootDistTar.compression = Compression.GZIP

bootDistZip.archiveName = "${project.name}.${bootDistZip.extension}"